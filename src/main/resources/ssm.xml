<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://cxf.apache.org/jaxws
        http://cxf.apache.org/schemas/jaxws.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!--、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、-->
    <!--mybatis配置-->

    <!--加载db.properties配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--创建SqlSessionFactoryBean-->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--指定mapper文件路径-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--加载SqlMapConfig.xml配置文件-->
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
    </bean>

    <!--创建SqlSessionTemplate，id=sqlSessionTemplate对应dao层的属性名-->
    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        &lt;!&ndash;将sqlSessionFactory注入&ndash;&gt;
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>-->

    <!--省略dao层实现类的写法-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dao"/>
        <property name="sqlSessionFactoryBeanName" value="factory"/>
    </bean>

    <!--、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、-->

    <!--spring配置-->

    <!--
        配置注解扫描，指定扫描com包下所有的注解，它会自动扫描com包下所有的子孙包
    -->
    <context:component-scan base-package="com"></context:component-scan>


    <!--、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、-->
    <!--springmvc配置-->

<!--
    mvc:annotation-driven的作用
    Spring 3.0.x中使用了mvc:annotation-driven后，默认会帮我们注册，默认处理请求，参数和返回值的类，
    其中最主要的两个类：DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter ，
    分别为HandlerMapping的实现类和HandlerAdapter的实现类，
    从3.1.x版本开始对应实现类改为了RequestMappingHandlerMapping和RequestMappingHandlerAdapter。

    HandlerMapping的实现类的作用
    实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。

    HandlerAdapter的实现类的作用
    实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。

    当配置了mvc:annotation-driven/后，Spring就知道了我们启用注解驱动。
    然后Spring通过context:component-scan/标签的配置，
    会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。

-->
    <mvc:annotation-driven></mvc:annotation-driven>

<!--
    location元素"/"表示webapp目录下的所有文件；
    mapping元素"/**"表示所有的请求路径；
    该配置的作用是：DispatcherServlet不会拦截webapp目录下所有的请求路径，并当作静态资源
    交由Servlet处理。
-->

<!--
    <mvc:resources mapping="/**" location="/"></mvc:resources>
-->

<!--
    <mvc:default-servlet-handler/>作用和上面相同
-->

<!--
    Servlet 的 RequestDispatcher 必须通过名称而不是路径来检索。
    换句话说就是 Spring MVC 将接收到的所有请求都看作是一个普通的请求，
    包括对于静态资源的请求。这样以来，所有对于静态资源的请求都会被看作是一个普通的后台控制器请求，
    导致请求找不到而报 404 异常错误。
    对于这个问题 Spring MVC 在全局配置文件中提供了一个<mvc:default-servlet-handler/>标签。
    在 WEB 容器启动的时候会在上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对DispatcherServlet的请求进行处理，
    如果该请求已经作了映射，那么会接着交给后台对应的处理程序，
    如果没有作映射，就交给 WEB 应用服务器默认的 Servlet 处理，
    从而找到对应的静态资源，只有再找不到资源时才会报错。
-->
    <mvc:default-servlet-handler/>

<!--
    试图解析器:
    就是当 DispatcherServlet将ModelAndView传递给视图解析器的时候，
    将ModelAndView数据填充到相应的视图中，
    然后返回一个带有数据的视图给DispatcherServlet.
-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、-->

    <!--配置注解式事物-->

<!--
    配置事务管理器
-->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--
    配置事务增强
    transaction-manager的值与事务管理器的id值一样
-->
    <tx:annotation-driven transaction-manager="tx"/>

    <!--cxf手机归属地-->
    <jaxws:client id="phone" serviceClass="cn.com.webxml.MobileCodeWSSoap"
                  address="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl"></jaxws:client>

</beans>